class ImpAbilitiesCommon:HDMagicBase{
	default{
		obituary "$OB_FIMPPLAYER";
		hdweapon.refid "fmp";
		tag "$TAG_FIMPPLAYER";
	}

	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Throw Fireballs\n"
		..WEPHELP_ALTFIRE.."  Hork Fireballs\n"
		;
	}

	override string,double getpickupsprite(){
		return "BAL1A0",1.;
	}

	states{
	fire:
	botattack:
		TNT1 A 0 A_JumpIf((player&&player.bot)&&!random(0,4),"bothork");
		TNT1 A 0 A_JumpIfInventory("HDGreens",2,"spam");
		goto notenoughgreens;

	altfire:
	bothork:
		TNT1 A 0 A_JumpIfInventory("HDGreens",6,"hork");
		goto notenoughgreens;

	hork:
		#### EEEEE 2{ A_SpawnItemEx("ReverseImpBallTail",4,24,random(31,33),1,0,0,0,160); A_GunFlash();}
		#### G 0 A_FireProjectile("HDPlayerImpBall",angle:frandom(2,10),
		pitch:(pitch+frandom(-4,3.6))*0.075);
		#### G 0 A_FireProjectile("HDPlayerImpBall",angle:frandom(-4,4),
		pitch:(pitch+frandom(-4,3.6))*0.05);
		#### G 0 A_FireProjectile("HDPlayerImpBall",angle:frandom(-2,10),
		pitch:(pitch+frandom(-4,3.6))*0.075);
		#### E 0{
		A_TakeInventory("HDGreens",6);
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=random(5,15);
		A_GunFlash();
		}
		#### GGFE 5 A_SetTics(random(4,6));
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;

	spam:
		#### DD 2;
		#### E 5 A_SetTics(random(4,6));
		#### E 2;
	spam2:
		#### F 2;
		#### G 6{
		A_FireProjectile("HDPlayerImpBall",angle:frandom(-3,4),
		pitch:(pitch+frandom(-2,1.8))*0.05);
		A_TakeInventory("HDGreens",2);
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=5;
		A_GunFlash();
		}
		#### F 4;
		#### F 0 A_Refire("fire");
		goto nope;
	}
}

class mageimpabilities:ImpAbilitiesCommon{
	default{
		hdweapon.refid "mmp";
		obituary "$OB_MIMPPLAYER";
		tag "$TAG_MIMPPLAYER";
	}
		bool islevitating;
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Throw Fireballs\n"
		..WEPHELP_ALTFIRE.."  Hork Fireballs\n"
		..WEPHELP_UNLOAD.."  Throw a Tracker Ball\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_FIRE.."  Scattershot\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_ALTFIRE.."  Levitation Attack\n"
		;
	}
	override void doeffect(){
		super.doeffect();
		if(islevitating)owner.A_Stop();
	}
	override string,double getpickupsprite(){
		return "BAL1E0",1.;
	}
	states{
	altfire:
		TNT1 A 0 A_JumpIf(pressingzoom(),"confirmlevitationshot");
		goto super::altfire;

	botlevitationshot:
		TNT1 A 5{if(A_CheckFloor("null"))vel.z+=4;}
		TNT1 A 10;
	confirmlevitationshot:
		TNT1 A 0 A_JumpIfInventory("HDGreens",24,"HoldItRightThere");
		goto notenoughgreens;

	holditrightthere:
		TNT1 A 0 A_CheckFloor("failbecausenotinair");
		goto LevitationShot;

	failbecausenotinair:
		TNT1 A 0{
				if(dohelptext())A_WeaponMessage(StringTable.Localize("$ABILITY_NOTINAIR"),25);
				}
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;

	confirmscattershot:
	botscattershot:
		TNT1 A 0 A_JumpIfInventory("HDGreens",42,"Scattershot");
		goto notenoughgreens;

	fire:
		TNT1 A 0 A_JumpIf((player&&player.bot)&&!random(0,6),"botscattershot");
		TNT1 A 0 A_JumpIf((player&&player.bot)&&!random(0,6),"botlevitationshot");
		TNT1 A 0 A_JumpIf((player&&player.bot)&&!random(0,4),"bottracker");
		TNT1 A 0 A_JumpIf(pressingzoom(),"confirmscattershot");
		goto super::fire;

	user4:
	bottracker:
		TNT1 A 0 A_JumpIfInventory("HDGreens",6,"trackerball");
		goto notenoughgreens;

	TrackerBall:
		#### E 6;
		#### F 6;
		TNT1 # 0 A_GunFlash();
		TNT1 H 0{
			target=null;
			A_LookEx (LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP,maxseedist:0,fov:90,label:"null"
			);
		}
		#### G 8{
		A_FireProjectile("PlayerArdentipedeBall",angle:(random(-6,6)),spawnofs_xy:(random(15,17)));
		A_TakeInventory("HDGreens",15);
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=5;
		}
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;


	Scattershot:
		TNT1 H 0{
			target=null;
			A_LookEx (LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP,maxseedist:0,fov:90,label:"null"
			);
		}
		#### E 2{
			target=null;
			A_LookEx (LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP,maxseedist:0,fov:90,label:"null");
		}
		#### E 2;
		#### EEEEEEE 2{ A_SpawnItemEx("ReverseImpBallTail",random(3,5),random(23,25),random(31,33),1,0,0,0,160); A_GunFlash();}
		#### F 6;

		#### GGGGGGGG 0 A_FireProjectile("PlayerArdentipedeBall2",angle:(frandom(-0.75,0.75)),pitch:(pitch+frandom(-1,2))*0.05);
		#### G 0{
		A_TakeInventory("HDGreens",42);
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=5;
		A_GunFlash();
		}
		#### GGFE 5;
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;

	LevitationShot:
		TNT1 H 0{
			target=null;
			A_LookEx (LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP,maxseedist:0,fov:90,label:"null"
			);
		}
		#### H 2{
			invoker.islevitating=true;
			target=null;
			A_LookEx (LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP,maxseedist:0,fov:90,label:"null");
		}
		#### H 16;
		#### HHHH 2 bright;
		#### HHHHHH 2 bright{
			double abp=pitch-random(0,1)*8.;
			let abs=getdefaultbytype("PlayerArdentipedeBall2").speed;
			double cp=cos(abp)*abs;
			double sp=-sin(abp)*abs;
			vector3 fbpos=(pos.xy,pos.z+16);
			for(int i=0;i<2;i++){
				let ab=PlayerArdentipedeBall2(spawn("PlayerArdentipedeBall2",fbpos,ALLOW_REPLACE));
				if(!ab)return;

				ab.target=self;
				ab.tracer=target;
				ab.accelpos=invoker.lasttargetpos;

				ab.angle=i?angle-4.5:angle+4.5;
				ab.pitch=abp;

				ab.vel=vel;
				ab.A_ChangeVelocity(cp,0,sp,CVF_RELATIVE);
			}
		}
		#### H 8{A_TakeInventory("HDGreens",24);invoker.islevitating=false;}
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;
	}
}

class healerimpabilities:ImpAbilitiesCommon{
	default{
		hdweapon.refid "hmp";
		obituary "$OB_HIMPPLAYER";
		tag "$TAG_HIMPPLAYER";
	}

	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Throw Fireballs\n"
		..WEPHELP_ALTFIRE.."  Throw a Shield Ball\n"
		..(deathmatch?"":(WEPHELP_RELOAD.."  Reanimate"))
		;
	}
	override string,double getpickupsprite(){
		return "BAL1C0",1.;
	}
	states{

	altfire:
	bothork:
		TNT1 A 0 A_JumpIfInventory("HDGreens",20,"ShieldBall");
		goto notenoughgreens;

	reload:
		TNT1 A 0 A_JumpIfInventory("HDGreens",75,"Heal");
		goto notenoughgreens;

	ShieldBall:
		#### E 2;
		#### EEEEE 2{ A_SpawnItemEx("ReverseImpBallTail",3,19,random(24,30),1,0,0,0,160); A_GunFlash();}
		#### F 4;
		#### F 4;
		#### G 0{
		A_GunFlash();
		A_FireProjectile("PlayerShieldImpBall",spawnofs_xy:8);
		A_TakeInventory("HDGreens",20);
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=5;
		}
		#### GGFE 5;
		TNT1 A 0{if((player&&player.bot))A_Refire("botattack");}
		goto nope;

	heal:
		TNT1 A 0 bright light("HEAL"){
			flinetracedata rlt;
			LineTrace(
				angle,128,pitch,
				TRF_ALLACTORS,
				offsetz:height-6,
				data:rlt
			);
			if(!rlt.hitactor||!rlt.hitactor.bcorpse){
			if(dohelptext())A_WeaponMessage(StringTable.Localize("$ABILITY_NOCORPSE"),25);
		}else{
	if(!rlt.hitactor.canraise()){if(dohelptext())a_weaponmessage(StringTable.Localize("$ABILITY_CANTREZ"),25);return;}
				A_TakeInventory("HDGreens",75);
				if(dohelptext())A_WeaponMessage(StringTable.Localize("$ABILITY_REANIMATED"),30);
				RaiseActor(rlt.hitactor,RF_NOCHECKPOSITION);
					rlt.hitactor.friendplayer=friendplayer;
					rlt.hitactor.master=self;
					rlt.hitactor.A_SetFriendly(bfriendly);
	    	}
		}
		TNT1 G 0 bright A_SpawnItemEx("ReanimationLight",flags:SXF_NOCHECKPOSITION|SXF_SETMASTER);
		#### AHAHAHAHAHA 4 light("HEAL");
		goto nope;
	}
}

class ReanimationLight:LightGrossHack{
states{
	spawn:
		TNT1 H 0 nodelay A_Stop();
		TNT1 AHAHAHAHAHA 4 light("HEAL");
		stop;
 }
}

class HDPlayerImpBall:HDFireball{
	default{
		+seekermissile
		missiletype "HDImpBallTail";
		decal "BrontoScorch";
		speed 12;
		damagetype "electrical";
		gravity 0;
		hdfireball.firefatigue int(HDCONST_MAXFIREFATIGUE*0.15);
	}
	double initangleto;
	double inittangle;
	double inittz;
	vector3 initpos;
	vector3 initvel;
	virtual void A_HDIBFly(){
		roll+=10;
		if(
			!(getage()&(1|2))
			||!A_FBSeek()
		){
			vel*=0.99;
			A_FBFloat();

			stamina++;
			switch(stamina){
			case 8:
			case 7:
				A_ChangeVelocity(0,-1,0,CVF_RELATIVE);break;
			case 6:
			case 5:
				A_ChangeVelocity(0,0,-1,CVF_RELATIVE);break;
			case 4:
			case 3:
				A_ChangeVelocity(0,1,0,CVF_RELATIVE);break;
			case 2:
			case 1:
				A_ChangeVelocity(0,0,1,CVF_RELATIVE);break;
			default:
				A_ChangeVelocity(cos(pitch)*0.1,0,-sin(pitch)*0.1,CVF_RELATIVE);
				stamina=0;break;
			}
		}
	}
	void A_ImpSquirt(){
		roll=frandom(0,360);alpha*=0.96;scale*=frandom(1.,0.96);
		if(!tracer)return;
		double diff=max(
			absangle(initangleto,angleto(tracer)),
			absangle(inittangle,tracer.angle),
			abs(inittz-tracer.pos.z)*0.05
		);
		int dmg=int(max(0,10-diff*0.1));
		if(
			tracer.bismonster
			&&!tracer.bnopain
			&&tracer.health>0
		)tracer.angle+=randompick(-10,10);

		//do it again
		initangleto=angleto(tracer);
		inittangle=tracer.angle;
		inittz=tracer.pos.z;

		setorigin((pos+(tracer.pos-initpos))*0.5,true);
		if(dmg){
			tracer.A_GiveInventory("Heat",dmg);
			tracer.damagemobj(self,target,max(1,dmg>>2),"hot");
		}
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(vel.x||vel.y||vel.z)initvel=vel.unit();
		else{
			double cp=cos(pitch);
			initvel=(cp*cos(angle),cp*sin(angle),-sin(pitch));
		}
		initvel*=0.3;
	}
	void A_FBTailAccelerate(){
		A_FBTail();
		vel+=initvel;
	}
	states{
	spawn:
		BAL1 ABABABABAB 2 A_FBTailAccelerate();
		BAL1 A 0 A_ChangeVelocity(0,-1,-1,CVF_RELATIVE);
	spawn2:
		BAL1 AB 3 A_HDIBFly();
		loop;
	death:
		TNT1 AAA 0 A_SpawnItemEx("HDSmoke",flags:SXF_NOCHECKPOSITION);
		TNT1 A 0{
			A_Scream();
			tracer=null;
			if(blockingmobj){
					if(!blockingline)tracer=blockingmobj;
					blockingmobj.damagemobj(self,target,random(6,18),"electrical");
			}
			if(tracer){
				initangleto=angleto(tracer);
				inittangle=tracer.angle;
				inittz=tracer.pos.z;
				initpos=tracer.pos-pos;

				let hdt=hdmobbase(tracer);

				//HEAD SHOT
				if(
					pos.z-tracer.pos.z>tracer.height*0.8
					&&(
						!hdt
						||(
							!hdt.bnovitalshots
							&&!hdt.bheadless
						)
					)
				){
					if(hd_debug)A_Log("HEAD SHOT");
					bpiercearmor=true;
				}
			}
			A_SprayDecal("BrontoScorch",radius*2);
		}
		BAL1 ABCCDDEEEEEEE 3 A_ImpSquirt();
		stop;
	}
}

class PlayerShieldImpBall:HDPlayerImpBall{
	default{
		+seekermissile +forcexybillboard
		decal "DoomImpScorch";
		-noblockmap
		+shootable +mthruspecies +noblooddecals
		scale 1.2;
		height 20;
		radius 20;
		speed 8;
		damagetype "electrical";
		damage 5;
		bloodtype "ShieldNeverBlood";
		health 1;
		hdfireball.firefatigue int(HDCONST_MAXFIREFATIGUE*0.6);
	}
	override int damagemobj(
		actor inflictor,actor source,int damage,
		name mod,int flags,double angle
	){
		if(!bmissile)return 0;
		ExplodeMissile();
		tempshield.spawnshield(self,"tempshieldimp",false,8);
		A_Scream();
		bmissile=false;
		setstatelabel("death");
		return 0;
	}
	vector2 savedvel;
	states{
	spawn:
		BAL1 A 0 nodelay{
			A_StartSound("imp/attack",CHAN_VOICE);
			savedvel=vel.xy;
		}
		BAL1 ABABAB 2 bright;
		BAL1 B 2 A_JumpIfTargetInLOS("see");
		BAL1 ABABAB 2 bright A_SeekerMissile(6,9);
	spawn2:
		BAL1 AB 3 A_HDIBFly();
		TNT1 A 0 {
			savedvel=vel.xy;
			A_FBTail();
			A_ChangeVelocity(
				0,
				sin(getage()),
				sin(level.time),
				CVF_RELATIVE
			);
			if(
				tracer
				&&(
					floorz>pos.z-16
					||floorz<pos.z+64
				)
				&&checksight(tracer)
			)A_SeekerMissile(6,9);
		}
		loop;
	death:
		TNT1 AAA 0 A_SpawnItemEx("HDSmoke",frandom(-1,1),frandom(-1,1),0,savedvel.x*0.2+frandom(-3,3),savedvel.y*0.2+frandom(-3,3),frandom(1,3),0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
		BAL1 A 2{
			vel.xy=savedvel*0.1;vel.z=1;
			A_NoBlocking();
		}
		BAL1 A 0{bshootable=false;}
		BAL1 BBCC 1 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,savedvel.x*0.2+frandom(-3,3),savedvel.y*0.2+frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
		TNT1 A 0 A_FadeOut(0.2);
		BAL1 CCCC 1 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		TNT1 A 0 A_FadeOut(0.2);
		BAL1 DDDD 1 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		BAL1 E 0 bright A_FadeOut(0.2);
		TNT1 A 0 A_Gravity();
		TNT1 A 0 A_GiveInventory("Heat",300);
		BAL1 E 2 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		BAL1 E 2 bright A_FadeOut(0.2);
		BAL1 E 2 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		BAL1 E 2 bright A_FadeOut(0.2);
		TNT1 AAAAAAA 4 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAAA 6 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAAA 14 bright A_SpawnItemEx("HDSmoke",random(-1,1),random(-1,1),0,frandom(-3,3),frandom(-3,3),random(1,2),0,SXF_NOCHECKPOSITION);
		stop;
	}
}

class PlayerArdentipedeBall:HDPlayerImpBall{
	default{
		missiletype "PlayerArdentipedeBallTail";
		speed 10;
		scale 1.2;
		hdfireball.firefatigue int(HDCONST_MAXFIREFATIGUE*0.4);
	}
	vector3 lasttracerpos;
	double lasttracerheight;
	override void A_HDIBFly(){
		roll=frandom(0,360);
		let hdm=hdmobbase(target);
		let ttt=tracer;
		if(!ttt&&!!target){
			ttt=target.target;
			tracer=ttt;
		}
		if(!ttt&&!hdm)return;

		vector3 dst;
		double thrust=0.7;

		if(
			!!ttt
			&&HDMath.Vec3Shorter((ttt.pos.xy,ttt.pos.z+ttt.height*0.6)-pos,256)
			&&checksight(ttt)
		){
			lasttracerpos=ttt.pos;
			lasttracerheight=ttt.height;
			thrust=0.9;
		}else if(!!hdm){
			lasttracerpos=hdm.lasttargetpos;
			lasttracerheight=hdm.lasttargetheight;
		}
		dst=lasttracerpos-pos;
		vel*=0.9;

		dst.x+=lasttracerheight*frandom(-0.6,0.6);
		dst.y+=lasttracerheight*frandom(-0.6,0.6);
		dst.z+=lasttracerheight*((!hdm||hdm.bcorpse)?frandom(0.05,0.3):frandom(0.3,0.9));
		vel+=HDMath.CrudeUnit(dst)*thrust;
	}
	states{
	spawn:
		BAL1 ABABABAB 2 A_FBTail();
		goto spawn2;
	death:
		TNT1 AAA 0 A_SpawnItemEx("HDSmoke",flags:SXF_NOCHECKPOSITION);
		TNT1 A 0 {if(blockingmobj)A_Immolate(blockingmobj,target,40);}
		goto super::death;
	}
}
class PlayerArdentipedeBall2:HDPlayerImpBall{
	default{
		missiletype "PlayerArdentipedeBallTail2";
		damage 2;
		speed 7;
		height 4;radius 4;
		scale 0.6;
		decal "Scorch";
		hdfireball.firefatigue int(HDCONST_MAXFIREFATIGUE*0.06);
	}
	override void A_HDIBFly(){
		roll=frandom(0,360);
		A_FBSeek(256);
	}
	vector3 accelpos;
	override void postbeginplay(){
		super.postbeginplay();
		if(!hdmobbase(target))accelpos=(0,0,0);
	}
	states{
	spawn:
		BAL1 A 2 bright{
			let ttt=hdmobbase(target);
			if(ttt)accelpos=(ttt.lasttargetpos.xy,ttt.lasttargetpos.z+ttt.lasttargetheight);
			if(accelpos!=(0,0,0)){
				vector3 acceldir=(accelpos-pos);
				acceldir/=max(abs(acceldir.x),abs(acceldir.y),abs(acceldir.z));
				vel=vel*0.8+acceldir*2;
			}
			stamina++;
			if(stamina>20){
				A_FaceMovementDirection();
				pitch+=frandom(-1,1);
				angle+=frandom(-1,1);
				setstatelabel("spawn2");
			}else if(stamina<5)A_FBTail();
		}
		loop;
	spawn2:
		BAL1 ABAB 1 bright fast A_ChangeVelocity(cos(pitch)*4,0,-sin(pitch)*4,CVF_RELATIVE);
	spawn3:
		BAL1 AB 3 bright fast A_HDIBFly();
		BAL1 A 0{
			let tocrash=(pos.z+vel.z*50-floorz);
			if(tocrash<0)vel.z-=0.01*tocrash;
		}
		loop;
	death:
		TNT1 A 0{
			spawn("HDSmoke",pos,ALLOW_REPLACE);
			if(blockingmobj)A_Immolate(blockingmobj,target,random(10,32));
		}
		BAL1 CDE 4 bright A_FadeOut(0.2);
		stop;
	}
}

class PlayerArdentipedeBallTail:HDFireballTail{
	default{
		deathheight 0.9;
		gravity 0;
		friction 0.92;
		radius 1.6;
	}
	states{
	spawn:
		BAL1 AB 2{
			roll=frandom(0,360);
			scale.x*=randompick(-1,1);
		}loop;
	}
}
class PlayerArdentipedeBallTail2:PlayerArdentipedeBallTail{
	default{
		deathheight 0.86;
		radius 0.7;
	}
}