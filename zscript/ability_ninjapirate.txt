class NPSpeeder : PowerSpeed
{
	Default
	{
		Powerup.Duration -1;
		Speed 9;
	}
}

class NinjaPirateAbilities:HDMagicBase{
	default{
		hdweapon.refid "nip"; //cat
		tag "$TAG_NINJAPIRATEPLAYER";
		obituary "$OB_NINJAPIRATEPLAYER";
	}

	override string gethelptext(){
		return
		WEPHELP_ALTFIRE.."  Toggle Invisibility\n\n
		You possess the ability to fake death."
		;
	}

	override string,double getpickupsprite(){
		return "PINSA0",1.;
	}

		bool owmybloods;
		bool pained;
		bool faked;
	states{

	fire:
		TNT1 A 0 A_WeaponBusy(false);
	readytodonothing:
		TNT1 A 0 A_JumpIf(pressing(BT_SPEED)||pressingfire()||pressingaltfire()||pressingreload()||pressingzoom(),2);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		loop;
		TNT1 A 0 A_SelectWeapon("HDFist");
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		wait;

	altfire:
		TNT1 A 0 A_JumpIf(invoker.owmybloods,"toggle");
		TNT1 A 0 A_JumpIfInventory("HDGreens",65,"toggle");
		goto notenoughgreens;

	toggle:
		#### A 1{
		A_AddBlackout(256,256,16,18);
		for(int i=0;i<3;i++)
			A_SpawnItemEx("HDSmoke",frandom(-1,1),
			frandom(-1,1),frandom(4,24),vel.x,vel.y,
			vel.z+frandom(1,3),0,
			SXF_ABSOLUTEMOMENTUM|
			SXF_NOCHECKPOSITION,0);
				if(invoker.owmybloods){
					invoker.owmybloods=false;
					bshadow=false;
					a_setrenderstyle(1.0,STYLE_Normal);
					bspecialfiredamage=false;
					A_TakeInventory("NPSpeeder");
				}else{
					invoker.owmybloods=true;
					A_TakeInventory("HDGreens",15);
				}
			}
		goto nope;
	}
	override void doeffect(){
		super.doeffect();
	string precious = "HDPrecious";
	class<HDDamageHandler> carblur = precious;
		if(carblur&&owner.countinv(carblur)>0){
			owner.A_TakeInventory(carblur,1);
			owner.A_GiveInventory("HDGreens",1250);
			HDMagicShield.FlashSparks(owner);
			if(hd_debug>=4)console.printf("Corrupted Blursphere absorbed.");
			}
		if(owner.countinv("HDBlursphere")>0){
			owner.A_TakeInventory("HDBlursphere",1);
			owner.A_GiveInventory("HDGreens",500);
			HDMagicShield.FlashSparks(owner);
			if(hd_debug>=4)console.printf("Blursphere absorbed.");
			}
		if(!owner.FindInventory("DeadRingerHandler"))
			owner.A_GiveInventory("DeadRingerHandler");
		if(
			!owmybloods
			&&!random(0,4)
			&&owner.health>0
		){
			let blur=spawn("PlayerBlur",(owner.pos.x+frandom(-2,2),owner.pos.y+frandom(-2,2),owner.pos.z+frandom(-2,2)),ALLOW_REPLACE);
				if(blur){
					blur.sprite=owner.sprite;
					if(owner.frame==5)blur.frame=4;
					else blur.frame=owner.frame;
					blur.translation=owner.translation;
					blur.angle=owner.angle;
				}
			}

		if(
			owmybloods
			&&!random(0,16)
			&&owner.health<31
		){
			let blur=spawn("DeadRingerPlayer2",(owner.pos.x+frandom(-2,2),owner.pos.y+frandom(-2,2),owner.pos.z+frandom(-2,2)),ALLOW_REPLACE);
				if(blur){
					blur.sprite=owner.sprite;
					blur.translation=owner.translation;
					blur.angle=owner.angle;
				}
			}

		if(
			!owner
			||owner.health<1
			||!owmybloods
		)return;

			if(
				owner.countinv("HDGreens")<5
			){
				AddBlackout(256,256,16,18);
				owmybloods=false;
				for(int i=0;i<3;i++)owner.A_SpawnItemEx("HDSmoke",frandom(-1,1),frandom(-1,1),frandom(4,24),vel.x,vel.y,vel.z+frandom(1,3),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION,0);
				owner.bshadow=false;
				owner.a_setrenderstyle(1.0,STYLE_Normal);
				owner.bspecialfiredamage=false;
				owner.A_TakeInventory("NPSpeeder");
				return;
			}else
				if(!random(0,20))
				owner.A_TakeInventory("HDGreens",5);

		if(!random(0,18)){
				owner.a_setrenderstyle(0.9,STYLE_Fuzzy);
				owner.bspecialfiredamage=(level.time&1);
		}else{
				owner.a_setrenderstyle(0.9,STYLE_None);
				owner.bspecialfiredamage=true;
		}
		
		int buttons=owner.player?owner.player.cmd.buttons:0;
		if(owmybloods){
			bool attacking=false;
			
			if(
				owner.frame==5 //"F"
				||(
					owner.player
					&&buttons&BT_ATTACK  //only fist has alt be an actual attack
					&&owner.player.readyweapon
					&&!owner.player.readyweapon.bwimpy_weapon
				)
			)attacking=true;
			if(
				attacking
			){
				AddBlackout(256,256,16,18);
				owmybloods=false;
				for(int i=0;i<3;i++)owner.A_SpawnItemEx("HDSmoke",frandom(-1,1),frandom(-1,1),frandom(4,24),vel.x,vel.y,vel.z+frandom(1,3),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION,0);
				owner.bshadow=false;
				owner.a_setrenderstyle(1.0,STYLE_Normal);
				owner.bspecialfiredamage=false;
				owner.A_TakeInventory("NPSpeeder");
				return;
		}

		//apply result
		owner.bshadow=true;
		owner.A_GiveInventory("NPSpeeder");

		//focus redirection powers
		if(
			owmybloods
			&&!(level.time&(1|2|4|8|16))
		){
			flinetracedata blurgaze;
			owner.linetrace(
				owner.angle,4096,owner.pitch,
				offsetz:owner.height*0.9,
				data:blurgaze
			);
			actor aaa=blurgaze.hitactor;
			if(
				aaa
				&&aaa.bismonster
				&&aaa.target==owner
				&&absangle(aaa.angleto(self),aaa.angle)<80
			){
				if(aaa.lastenemy==owner)aaa.lastenemy=null;
				let hdb=hdmobbase(aaa);
				if(hdb){
					vector2 targdir=owner.pos.xy-hdb.pos.xy;
					targdir=angletovector(hdb.angle+frandom(120,240),1024);
					hdb.lasttargetpos.xy=hdb.pos.xy+targdir;
				}else{
					aaa.A_ClearTarget();
					}
				}
			}
		}
	}
}

class DeadRingerHandler:HDDamageHandler{
    default{
		HDDamageHandler.priority 10001;
		HDPickup.overlaypriority 10001;
	}
	override void ownerdied(){
		destroy();
	}
	states{
	spawn:
		TNT1 A 1;
		stop;
	}


	//called from HDPlayerPawn and HDMobBase's DamageMobj
	override int,name,int,double,int,int,int HandleDamage(
		int damage,
		name mod,
		int flags,
		actor inflictor,
		actor source,
		double towound,
		int toburn,
		int tostun,
		int tobreak
	){
		if((!owner||mod=="maxhpdrain")||mod=="internal"||mod=="bleedout"||mod=="staples"||mod=="hot")
		return damage,mod,flags,towound,toburn,tostun,tobreak;
		let np=NinjaPirateAbilities(owner.findinventory("NinjaPirateAbilities"));

							if(!random(0,4)&&np.owmybloods){
								np.AddBlackout(256,256,16,18);
								np.owmybloods=false;
								for(int i=0;i<3;i++)
								owner.A_SpawnItemEx("HDSmoke",frandom(-1,1),
								frandom(-1,1),frandom(4,24),vel.x,vel.y,
								vel.z+frandom(1,3),0,
								SXF_ABSOLUTEMOMENTUM
								|SXF_NOCHECKPOSITION,0);
								owner.bshadow=false;
								owner.a_setrenderstyle(1.0,STYLE_Normal);
								owner.bspecialfiredamage=false;
								owner.A_TakeInventory("NPSpeeder");
		return damage,mod,flags,towound,toburn,tostun,tobreak;
             }

			if(
				!random(0,8)
				&&owner.countinv("HDGreens")>85
			){
			if(!np.owmybloods){
					np.AddBlackout(256,256,16,18);
					np.owmybloods=true;
				}
					class<actor> which;
					if(owner.frame==11)which="DeadRingerPlayer3";
					else which="DeadRingerPlayer";
					let fake=spawn(which,owner.pos,ALLOW_REPLACE);
						if(fake){
							fake.sprite=owner.sprite;
							owner.A_Scream();
							owner.A_TakeInventory("HDGreens",45);
							fake.vel.x=owner.vel.x;
							fake.vel.y=owner.vel.y;
							fake.vel.z=owner.vel.z;
							fake.translation=owner.translation;
							fake.angle=owner.angle;
						}
        	}
		return damage,mod,flags,towound,toburn,tostun,tobreak;
	}

	override void DisplayOverlay(hdstatusbar sb,hdplayerpawn hpl){
		let np=NinjaPirateAbilities(owner.findinventory("NinjaPirateAbilities"));
		if(!np.owmybloods)return;

		double sclx=(2./1.2);
		double scly=2.;
		name ctex="HDXCAM_NINJA";
		sb.SetSize(0,300,200);
		sb.BeginHUD(forcescaled:true);
		texman.setcameratotexture(hpl,ctex,sb.cplayer.fov*(1.3+0.03*(sin(owner.level.time))));
		bool invis=owner.bspecialfiredamage;
		double camalpha=random(128,256)*(invis?0.01:0.009);
		int ilv=invis?2:5;
		int dif=sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER|sb.DI_ITEM_HCENTER;
		sb.drawimage(
			ctex,(-ilv,0),
			dif,
			alpha:camalpha,
			scale:(sclx,scly)
		);
		camalpha*=0.4;
		sb.drawimage(
			ctex,(ilv,0),
			dif,
			alpha:camalpha*0.6,
			scale:(sclx,scly)
		);
	}
}

class DeadRingerPlayer:HDActor{
	default{
		+nointeraction
	}
	states{
	spawn:
		#### A 0 A_SetTranslucent(1);
		#### IIIIJJJJKKKKLLLLMMMM 1 {vel*=0.8;}
		#### N 350 {vel=(0,0,0);}
		#### N 20 A_FadeOut(0.1);
		wait;
	}
}

class DeadRingerPlayer3:DeadRingerPlayer{
	states{
	spawn:
		#### N 350 {vel=(0,0,0);}
		#### N 20 A_FadeOut(0.1);
		wait;
	}
}

class DeadRingerPlayer2:DeadRingerPlayer{
	default{
		alpha 0;
renderstyle "none";
	}
	states{
	spawn:
		#### N random(0,TICRATE*5);
		#### N 0 A_SetRenderStyle(0.0,STYLE_Normal);
	idle:
		#### N 5 A_FadeIn(0.01);
		#### N 0 A_JumpIf(alpha>=1.,"death");
		loop;
	death:
		#### N 350;
		#### N 20 A_FadeOut(0.1);
		wait;
	}
}

class PlayerBlur:HDActor{
	default{
		+nointeraction +notimefreeze
		alpha 0.6;
	}
	states{
	spawn:
		#### # 0 nodelay A_ChangeVelocity(frandom(-1,3),frandom(-1,1),frandom(-1,1));
		#### # 1 A_FadeOut(0.05);
		wait;
	}
}