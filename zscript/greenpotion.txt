
//The green potion.
class SpentGreenBottle:SpentStim{
	default{
		alpha 0.6;renderstyle "translucent";
		bouncesound "potion2/bounce";bouncefactor 0.4;scale 0.3;radius 4;height 4;
	}
	states{
	spawn:
		BON3 E 0;
		goto spawn2;
	death:
		---- A 100{
			if(random(0,7))roll=randompick(90,270);else roll=0;
			if(roll==270)scale.x*=-1;
		}
		---- A random(2,4){
			if(frandom(0.1,0.9)<alpha){
				angle+=random(-12,12);pitch=random(45,90);
				actor a=spawn("HDGunSmoke",pos,ALLOW_REPLACE);
				a.scale=(0.4,0.4);a.angle=angle;
			}
			A_FadeOut(frandom(-0.03,0.032));
		}wait;
	}
}
class SpentGPCork:SpentGreenBottle{
	default{
		bouncesound "misc/casing3";scale 0.6;
		translation "224:231=64:71";
	}
	states{
	spawn:
		PBRS A 2 A_SetRoll(roll+90,SPF_INTERPOLATE);
		wait;
	}
}

class HDGreenPotion:HDWeapon{
	default{
		//$Category "Items/Hideous Destructor/Magic"
		//$Title "Magics Potion"
		//$Sprite "BON30"

		+inventory.ishealth
		+weapon.wimpy_weapon
		+weapon.no_auto_switch
		+inventory.invbar
		+hdweapon.fitsinbackpack
		weapon.selectionorder 1000;
		inventory.pickupmessage "$PICKUP_GREENPOTION";
		inventory.pickupsound "potion2/swish";
		tag "$TAG_GREENPOTION";
		inventory.icon "BON3A0";
		scale 0.3;
	}

	override string,double getpickupsprite(){return "BON3A0",1.;}
	override double weaponbulk(){
		return (ENC_POTION*0.7)+(ENC_POTION*0.04)*weaponstatus[HDHM_AMOUNT];
	}
	override string gethelptext(){LocalizeHelp();
		return LWPHELP_FIRE..StringTable.Localize("$HEALWH_FIRE")
		;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		sb.drawimage(
			"BON3A0",(-23,-7),
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_RIGHT
		);
		sb.drawwepnum(hdw.weaponstatus[HDHM_AMOUNT],HDHM_BOTTLE);
	}
	override int getsbarnum(int flags){
		return weaponstatus[HDHM_AMOUNT];
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[HDHM_AMOUNT]=HDHM_BOTTLE;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){
		if(weaponstatus[INJECTS_AMOUNT]<1)doselect=false;
		return GetSpareWeaponRegular(newowner,reverse,doselect);
	}
	states(actor){
	spawn:
		TNT1 A 1 nodelay{
			if(weaponstatus[INJECTS_AMOUNT]>0)setstatelabel("idlecheck");
		}
		ECTP A 0{
			actor a=null;
			a=spawn("SpentGreenBottle",pos,ALLOW_REPLACE);
			a.A_StartSound("potion/open",CHAN_BODY);
			a.angle=angle;a.pitch=pitch;a.target=target;a.vel=vel;

			//the cork only matters for id
			let aa=spawn("SpentCork",pos,ALLOW_REPLACE);
			aa.angle=angle+3;
			aa.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(0,1));
		}
		stop;
	idlecheck:
		BON3 A 0 nodelay{
			int amt=weaponstatus[INJECTS_AMOUNT];
			if(amt>9)setstatelabel("BON3");
			else if(amt>6)setstatelabel("BN3A");
			else if(amt>3)setstatelabel("BN3B");
			else if(amt>1)setstatelabel("BN3C");
			else setstatelabel("idleempty");
		}

	BON3:
		BON3 A 0;
		goto idle;
		
	BN3A:
		BN3A A 0;
		goto idle;
		
	BN3B:
		BN3B A 0;
		goto idle;
	
	BN3C:
		BN3C A 0;
		goto idle2;
	
	idleempty:
		BN3D A -1;
		stop;
	
	idle:
		#### ABCDCB 2 light("MANAPOTION") A_SetTics(random(1,3));
		loop;

	idle2:
		#### ABCDCB 2 A_SetTics(random(1,3));
		loop;
	}
	states{
	select:
		TNT1 A 0{
			if(DoHelpText())A_WeaponMessage(Stringtable.Localize("$GREENPOTION_TEXT1"));
			A_StartSound("potion2/swish",8,CHANF_OVERLAP);
		}
		goto super::select;
	deselect:
		TNT1 A 10{
			if(invoker.weaponstatus[HDHM_AMOUNT]<1){
				DropInventory(invoker);
				return;
			}
			A_StartSound("potion2/swish",8,CHANF_OVERLAP);
		}
		TNT1 A 0 A_Lower(999);
		wait;
	fire:
		TNT1 A 0{
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}
		}
		TNT1 A 4 A_WeaponReady(WRF_NOFIRE);
		TNT1 A 1{
			A_StartSound("potion2/open",CHAN_WEAPON);
			A_Refire();
		}
		TNT1 A 0 A_StartSound("potion2/swish",8);
		goto nope;
	hold:
		TNT1 A 1;
		TNT1 A 0{
			A_WeaponBusy();
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}else if(pitch>-55){
				A_MuzzleClimb(0,-8);
				A_Refire();
			}else{
				A_Refire("inject");
			}
		}
		TNT1 A 0 A_StartSound("potion2/away",CHAN_WEAPON,volume:0.4);
		goto nope;
	inject:
		TNT1 A 7{
			A_MuzzleClimb(0,-2);
			if(invoker.weaponstatus[HDHM_AMOUNT]>0){
				invoker.weaponstatus[HDHM_AMOUNT]--;
				A_StartSound("potion/chug",CHAN_VOICE);
				if(!self.countinv("HDGreens"))HDMagicShield.FlashSparks(self);
				HDF.Give(self,"HDGreens",HDHM_MOUTH);
					//a rare occurrence that a drinker gets an ability.
				class<inventory> power;
				HDMagicList hml=HDMagicList.get();
				power=(class<HDMagicBase>)(hml.invclasses[random(0,hml.invclasses.size()-1)]);
				if(!random(0,128)){
					let hdp=HDPlayerPawn(self);
					if(hdp)
						hdf.give(hdp,power,1);
					self.A_Log("$POWER_RESONATE");
				}
			}
		}
		TNT1 AAAAA 1 A_MuzzleClimb(0,0.5);
		TNT1 A 5 A_JumpIf(!pressingfire(),"injectend");
		goto hold;
	injectend:
		TNT1 A 6;
		TNT1 A 0{
			if(invoker.weaponstatus[HDHM_AMOUNT]>0)A_StartSound("potion2/away",CHAN_WEAPON,volume:0.4);
		}
		goto nope;
	}
}

/*

// old code before this commit
// https://codeberg.org/mc776/HideousDestructor/commit/c61a494dc0f045f5779d57802097d722df8aa333

class HDGreenPotion:hdinjectormaker{
	default{
		//$Category "Items/Hideous Destructor/Magic"
		//$Title "Magics Potion"
		//$Sprite "BON3A0"

		hdmagammo.mustshowinmagmanager true;
		inventory.pickupmessage "$PICKUP_GREENPOTION";
		inventory.pickupsound "potion2/swish";
		inventory.icon "BON3A0";
		scale 0.3;
		tag "$TAG_GREENPOTION";
		hdmagammo.maxperunit HDHM_BOTTLE;
		hdmagammo.magbulk ENC_POTION*0.7;
		hdmagammo.roundbulk ENC_POTION*0.04;
		+inventory.ishealth
		hdinjectormaker.injectortype "HDGreenBottler";
	}
	override string,string,name,double getmagsprite(int thismagamt){
		return "BON3A0","TNT1A0","HDGreenPotion",0.3;
	}
	override int getsbarnum(int flags){return mags.size()?mags[0]:0;}
	override bool Extract(){return false;}
	override bool Insert(){
		if(amount<2)return false;
		int lowindex=mags.size()-1;
		if(
			mags[lowindex]>=maxperunit
			||mags[0]<1
		)return false;
		mags[0]--;
		mags[lowindex]++;
		owner.A_StartSound("potion2/swish",8);
		if(mags[0]<1){
			mags.delete(0);
			amount--;
			owner.A_StartSound("potion2/open",CHAN_WEAPON);
			actor a=owner.spawn("SpentGreenBottle",(owner.pos.xy,owner.pos.z+owner.height*0.8),ALLOW_REPLACE);
			a.angle=owner.angle+2;a.vel=owner.vel;a.A_ChangeVelocity(3,1,4,CVF_RELATIVE);
				a=owner.spawn("SpentGPCork",(owner.pos.xy,owner.pos.z+owner.height*0.8),ALLOW_REPLACE);
				a.angle=owner.angle+3;a.vel=owner.vel;a.A_ChangeVelocity(5,3,4,CVF_RELATIVE);
		}
		return true;
	}
	states{
	use:
		TNT1 A 0 A_JumpIf(
			player.cmd.buttons&BT_USE
			&&(
				!findinventory("HDGreenBottler")
				||!HDGreenBottler(findinventory("HDGreenBottler")).bweaponbusy
			)
		,1);
		goto super::use;
	cycle:
		TNT1 A 0{
			invoker.syncamount();
			int firstbak=invoker.mags[0];
			int limamt=invoker.amount-1;
			for(int i=0;i<limamt;i++){
				invoker.mags[i]=invoker.mags[i+1];
			}
			invoker.mags[limamt]=firstbak;
			A_StartSound("potion2/swish",CHAN_WEAPON,CHANF_OVERLAP,0.5);
			A_StartSound("weapons/pocket",9,volume:0.3);
		}fail;
	spawn:
		BON3 A 0 nodelay{
			int amt=invoker.mags[0];
			if(amt>9)setstatelabel("BON3");
			else if(amt>6)setstatelabel("BN3A");
			else if(amt>3)setstatelabel("BN3B");
			else if(amt>1)setstatelabel("BN3C");
			else setstatelabel("idleempty");
		}

	BON3:
		BON3 A 0;
		goto idle;
		
	BN3A:
		BN3A A 0;
		goto idle;
		
	BN3B:
		BN3B A 0;
		goto idle;
	
	BN3C:
		BN3C A 0;
		goto idle2;
	
	idleempty:
		BN3D A -1;
		stop;
	
	idle:
		#### ABCDCB 2 light("MANAPOTION") A_SetTics(random(1,3));
		loop;

	idle2:
		#### ABCDCB 2 A_SetTics(random(1,3));
		loop;
	}
}
class HDGreenBottler:HDWoundFixer{
	default{
		weapon.selectionorder 1000;
		tag "$TAG_GREENPOTION";
	}
	override string,double getpickupsprite(){return "BON3A0",1.;}
	override string gethelptext(){
		return WEPHELP_FIRE.."  Drink\n"
		..WEPHELP_USE.." + "..WEPHELP_USE.."(item)  Cycle"
		;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		sb.drawimage(
			"BON3D0",(-23,-7),
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_RIGHT
		);
		sb.drawwepnum(hdw.weaponstatus[INJECTS_AMOUNT],HDHM_BOTTLE);
	}
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			int amt=invoker.weaponstatus[INJECTS_AMOUNT];
			actor a=null;
			if(amt>0){
				a=spawn("HDGreenPotion",invoker.pos,ALLOW_REPLACE);
				a.A_StartSound("potion2/swish",CHAN_BODY);
				if(HDGreenPotion(a))HDGreenPotion(a).mags[0]=amt;
			}else{
				a=spawn("SpentGreenBottle",invoker.pos,ALLOW_REPLACE);
				a.A_StartSound("potion2/open",CHAN_BODY);

					let aa=spawn("SpentGPCork",pos+gunpos(),ALLOW_REPLACE);
					aa.angle=angle+3;aa.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(0,1));
			}
			a.angle=self.angle;a.vel=self.vel;
			a.target=self;
			a.vel=vel;

			//if dropped while sprinting, treat as dropped one from inventory
			let hdp=HDPlayerPawn(target);
			if(
				!!hdp
				&&!!hdp.player
				&&!!NullWeapon(hdp.player.readyweapon)
			){
				let iii=HDInjectorMaker(hdp.findinventory("HDGreenPotion"));
				if(
					!!iii
					&&iii.amount>0
				){
					iii.SyncAmount();
					if(HDGreenPotion(a))HDGreenPotion(a).mags[0]=iii.mags[0];

					invoker.weaponstatus[0]^=~INJECTF_SPENT;
					invoker.weaponstatus[INJECTS_AMOUNT]=iii.mags[0];
					iii.mags.delete(0);
					iii.amount--;
				}
			}
		}
		stop;
	select:
		TNT1 A 0{
			if(DoHelpText())A_WeaponMessage(Stringtable.Localize("$GREENPOTION_TEXT1"));
			A_StartSound("potion2/swish",8,CHANF_OVERLAP);

			let iii=HDGreenPotion(findinventory("HDGreenPotion"));
			if(
				!!iii
				&&iii.amount>0
			){
				iii.SyncAmount();
				invoker.weaponstatus[INJECTS_AMOUNT]=iii.mags[0];
				iii.mags.delete(0);
				iii.amount--;
			}
		}
		goto super::select;
	deselect:
		TNT1 A 10 A_StartSound("potion2/swish",8,CHANF_OVERLAP);
		TNT1 A 0{
			if(invoker.weaponstatus[INJECTS_AMOUNT]<1){
				DropInventory(invoker);
				return;
			}

			//make sure the last used one appears at the top
			let iii=HDGreenPotion(findinventory("HDGreenPotion"));
			if(!!iii){
				iii.mags.insert(0,invoker.weaponstatus[INJECTS_AMOUNT]);
				iii.amount++;
			}else HDMagAmmo.GiveMag(self,"HDGreenPotion",invoker.weaponstatus[INJECTS_AMOUNT]);
		}
		TNT1 A 0 A_Lower(999);
		wait;
	fire:
		TNT1 A 0{
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}
		}
		TNT1 A 4 A_WeaponReady(WRF_NOFIRE);
		TNT1 A 1{
			A_StartSound("potion2/open",CHAN_WEAPON);
			A_Refire();
		}
		TNT1 A 0 A_StartSound("potion2/swish",8);
		goto nope;
	hold:
		TNT1 A 1;
		TNT1 A 0{
			A_WeaponBusy();
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}else if(pitch>-55){
				A_MuzzleClimb(0,-8);
				A_Refire();
			}else{
				A_Refire("inject");
			}
		}
		TNT1 A 0 A_StartSound("potion2/away",CHAN_WEAPON,volume:0.4);
		goto nope;
	inject:
		TNT1 A 7{
			A_MuzzleClimb(0,-2);
			if(invoker.weaponstatus[INJECTS_AMOUNT]>0){
				invoker.weaponstatus[INJECTS_AMOUNT]--;
				A_StartSound("potion2/chug",CHAN_VOICE);
		if(!self.countinv("HDGreens"))HDMagicShield.FlashSparks(self);
				HDF.Give(self,"HDGreens",HDHM_MOUTH);

			//a rare occurrence that a drinker gets an ability.
		class<inventory> power;
		HDMagicList hml=HDMagicList.get();
		power=(class<HDMagicBase>)(hml.invclasses[random(0,hml.invclasses.size()-1)]);
		if(!random(0,128)){
		    let hdp=HDPlayerPawn(self);
			if(hdp)
			    hdf.give(hdp,power,1);
			self.A_Log("$POWER_RESONATE");
		}
			}
		}
		TNT1 AAAAA 1 A_MuzzleClimb(0,0.5);
		TNT1 A 5 A_JumpIf(!pressingfire(),"injectend");
		goto hold;
	injectend:
		TNT1 A 6;
		TNT1 A 0{
			if(invoker.weaponstatus[INJECTS_AMOUNT]>0)A_StartSound("potion2/away",CHAN_WEAPON,volume:0.4);
		}
		goto nope;
	}
}
*/

class HDMagicList:Thinker{
	//obtain the thinker
	static HDMagicList get(){
		HDMagicList hdlc=null;
		thinkeriterator hdlcit=thinkeriterator.create("HDMagicList");
		while(hdlc=HDMagicList(hdlcit.next())){
			if(hdlc)break;
		}
		if(!hdlc){
			hdlc=new("HDMagicList");
			hdlc.initclasslist();
		}
		return hdlc;
	}
	array<string> invclasses;
	void initclasslist(){
		invclasses.clear();

		//retrieve list of magics
		for(int i=0;i<allactorclasses.size();i++){
			let iic=(class<HDMagicBase>)(allactorclasses[i]);
			if(!iic)continue;
			let iid=getdefaultbytype(iic);
			if(
				iid
				&&iid.refid!=""
			)invclasses.push(iic.getclassname());
		}
	}
}

class HDGreens:HDMagicShield{
	default{
		-quicktoretaliate
		inventory.maxamount 1000000;

		HDDamageHandler.priority 9999;
	}
	int greenquery;

	override void OnDrop(actor dropper){}
	static void Deplete(
		actor owner,
		int amount,
		HDGreens shields=null,
		bool destroydepleted=false
	){
		if(!shields)shields=HDGreens(owner.findinventory("HDGreens"));
		if(shields){
			shields.amount-=amount;
			if(shields.amount<1){
				int downto=-64;
				shields.amount=downto;
				if(hd_debug)console.printf(owner.getclassname().." shield broke to "..downto.."!");
				owner.A_StartSound("misc/mobshieldx", CHAN_BODY, CHANF_OVERLAP, 0.75);
				double oradius=owner.radius;
				double oheight=owner.height;
				vector3 ovel=owner.vel;
				for(int i=0;i<10;i++){
					vector3 rpos=owner.pos+(
						frandom(-oradius,oradius),
						frandom(-oradius,oradius),
						frandom(0,oheight)
					);
					actor spk=actor.spawn("ShieldSpark",rpos,ALLOW_REPLACE);
					spk.vel=(frandom(-2,2),frandom(-2,2),frandom(-2,2))+ovel;
				}
				if(destroydepleted)shields.destroy();
			}
		}
	}
	override void DoEffect(){
		if(greenquery<35){greenquery++;}else{greenquery=0;if(hd_debug>=4)console.printf("GREENS "..amount);}
		if(
			owner.bcorpse
			||owner.health<1
			||owner.isfrozen()
		)return;
		if(accuracy>0)accuracy--;

		if(
			amount<1
			&&(
				maxamount<1
				||(
					owner.player
					&&!bquicktoretaliate
				)
			)
		){
			destroy();
			return;
		}
	}

	//called from HDPlayerPawn and HDMobBase's DamageMobj
	override int,name,int,double,int,int,int HandleDamage(
		int damage,
		name mod,
		int flags,
		actor inflictor,
		actor source,
		double towound,
		int toburn,
		int tostun,
		int tobreak
	){
		actor victim=owner;
		if(
			!victim
			||(flags&(DMG_NO_FACTOR|DMG_FORCED))
			||amount<1
			||!inflictor
			||(inflictor==victim)
			||(inflictor is "HDBulletActor")
			||mod=="bleedout"
			||mod=="hot"
			||mod=="cold"
			||mod=="maxhpdrain"
			||mod=="internal"
			||mod=="holy"
			||mod=="jointlock"
			||mod=="staples"
		)return damage,mod,flags,towound,toburn,tostun,tobreak;

		if(!stamina)stamina=maxamount;

		int blocked=min(amount>>1,damage,stamina>>1);
		damage-=blocked;
		bool supereffective=(
			mod=="BFGBallAttack"
			||mod=="electrical"
			||mod=="balefire"
		);

		HDGreens.Deplete(victim,max(supereffective?(blocked<<2):blocked,1),self);


		if(hd_debug)console.printf("BLOCKED (not bullet)  "..blocked.."    OF  "..damage+blocked..",   "..amount.." REMAIN");


		//spawn shield debris
		vector3 sparkpos;
		if(
			inflictor
			&&inflictor!=source
		)sparkpos=inflictor.pos;
		else if(
			source
		)sparkpos=(
			victim.pos.xy+victim.radius*(source.pos.xy-victim.pos.xy).unit()
			,victim.pos.z+min(victim.height,source.height*0.6)
		);
		else sparkpos=(victim.pos.xy,victim.pos.z+victim.height*0.6);

		int shrd=max(1,blocked>>6);
		for(int i=0;i<shrd;i++){
			actor aaa=victim.spawn("ShieldSpark",sparkpos,ALLOW_REPLACE);
			aaa.vel=(frandom(-3,3),frandom(-3,3),frandom(-3,3));
		}

		//chance to flinch
		if(damage<1){
			if(
				!(flags&DMG_NO_PAIN)
				&&blocked>(victim.spawnhealth()>>3)
				&&random(0,255)<victim.painchance
			)hdmobbase.forcepain(victim);
		}

		return damage,mod,flags,towound,toburn,tostun,tobreak;
	}

	//called from HDBulletActor's OnHitActor
	override double,double OnBulletImpact(
		HDBulletActor bullet,
		double pen,
		double penshell,
		double hitangle,
		double deemedwidth,
		vector3 hitpos,
		vector3 vu,
		bool hitactoristall
	){
		actor victim=owner;
		if(
			!victim
			||!bullet
			||amount<1
		)return pen,penshell;

		if(!stamina)stamina=maxamount;

		double bulletpower=pen*bullet.mass*0.1;
		if(bulletpower<1){
			if(frandom(0,1)<bulletpower)bulletpower=1;
			else bulletpower=0;
		}

		int depleteshield=int(min(bulletpower,amount));


		if(hd_debug)console.printf("BLOCKED  "..depleteshield.."    OF  "..int(bulletpower)..",   "..int(amount-bulletpower).." REMAIN");


		if(depleteshield<=0){
			if(!bulletpower)return 0,penshell;
			return pen,penshell;
		}

		HDGreens.Deplete(victim,depleteshield,self);
		spawn("ShieldNeverBlood",bullet.pos,ALLOW_REPLACE);


		victim.vel+=(
			((victim.pos.xy,victim.pos.z+victim.height*0.5)-bullet.pos).unit()
			*depleteshield
			/victim.mass
		);
		victim.angle+=deltaangle(victim.angle,victim.angleto(bullet))*frandom(-0.005,0.03);
		victim.pitch+=frandom(-1.,1.);

		double addpenshell=min(pen,amount,stamina>>3);
		if(addpenshell>0){
			pen-=addpenshell;
			penshell+=addpenshell; //in case anything else uses this value
		}
		return pen,penshell;
	}
}